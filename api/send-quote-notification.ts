// api/send-quote-notification.ts
import { Resend } from 'resend';
import { VercelRequest, VercelResponse } from '@vercel/node';

// Ensure RESEND_API_KEY is set in Vercel Environment Variables
const resend = new Resend(process.env.RESEND_API_KEY);

// Define expected request body structure - now handles both types
interface QuoteRequestBody {
    quoteId: string; // The ID generated by Supabase
    userEmail?: string; // Email of the user requesting the quote
    notes?: string;

    // Translation Specific (Optional)
    sourceLanguage?: string;
    targetLanguage?: string;
    documentPaths?: string[]; // Array of storage paths
    translationType?: string; // e.g., 'certified' or 'standard'

    // Credential Evaluation Specific (Optional)
    country?: string;
    graduationYear?: number; // Changed to number based on frontend parseInt
    degreeReceived?: string;
}

// HTML email template for admin notification (Translation)
const createTranslationAdminEmailHtml = (data: QuoteRequestBody): string => `
  <h1>New Translation Quote Request Received: #${data.quoteId}</h1>
  <p>A new translation quote request has been submitted:</p>
  <ul>
    <li><strong>Quote ID:</strong> ${data.quoteId}</li>
    <li><strong>User Email:</strong> ${data.userEmail || 'N/A'}</li>
    <li><strong>Translation Type:</strong> ${data.translationType}</li>
    <li><strong>Language:</strong> ${data.sourceLanguage} to ${data.targetLanguage}</li>
    <li><strong>Documents Submitted:</strong> ${data.documentPaths?.length || 0}</li>
    ${data.documentPaths?.map(path => `<li>Document Path: ${path}</li>`).join('')} {/* Display path, link construction needs context */}
    <li><strong>Notes:</strong> ${data.notes || 'None'}</li>
  </ul>
  <p>
    <a href="https://www.openeval.com/admin/quotes/${data.quoteId}">Please login to provide a quote.</a>
  </p>
  <p><strong>Note:</strong> Document links require constructing the full URL based on your Supabase project/bucket.</p>
`;

// HTML email template for admin notification (Credential Evaluation)
const createCredentialAdminEmailHtml = (data: QuoteRequestBody): string => `
  <h1>New Credential Evaluation Request Received: #${data.quoteId}</h1>
  <p>A new credential evaluation request has been submitted:</p>
  <ul>
    <li><strong>Quote ID:</strong> ${data.quoteId}</li>
    <li><strong>User Email:</strong> ${data.userEmail || 'N/A'}</li>
    <li><strong>Country of Education:</strong> ${data.country}</li>
    <li><strong>Year of Graduation:</strong> ${data.graduationYear}</li>
    <li><strong>Degree Received:</strong> ${data.degreeReceived}</li>
    <li><strong>Notes:</strong> ${data.notes || 'None'}</li>
  </ul>
  <p>
    <a href="https://www.openeval.com/admin/quotes/${data.quoteId}?source=api">Please login to provide an equivalence.</a>
  </p>
`;


export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).end('Method Not Allowed');
  }

  try {
    const body: QuoteRequestBody = req.body;

    // Determine request type based on fields present
    const isTranslationRequest = !!body.sourceLanguage && !!body.targetLanguage && !!body.translationType;
    const isCredentialRequest = !!body.country && !!body.graduationYear && !!body.degreeReceived;

    // Basic validation - ensure it's one type or the other and has quoteId
    if (!body.quoteId || (!isTranslationRequest && !isCredentialRequest)) {
        console.error("Validation Failed: Missing required fields.", body); // Log the body for debugging
        return res.status(400).json({ error: { message: 'Missing required quote details for email notification.' }});
    }

    let emailHtml: string;
    let emailSubject: string;

    if (isCredentialRequest) {
        emailHtml = createCredentialAdminEmailHtml(body);
        emailSubject = `New Credential Evaluation Request: #${body.quoteId}`;
        console.log("Processing as Credential Evaluation Request");
    } else if (isTranslationRequest) {
        // Additional validation for translation requests
        if (!body.documentPaths) {
             console.error("Validation Failed: Missing documentPaths for translation request.", body);
             return res.status(400).json({ error: { message: 'Missing documentPaths for translation quote notification.' }});
        }
        emailHtml = createTranslationAdminEmailHtml(body);
        emailSubject = `New Translation Quote Request: #${body.quoteId}`;
        console.log("Processing as Translation Request");
    } else {
        // Should not happen if initial validation is correct, but as a fallback
        console.error("Validation Failed: Could not determine request type.", body);
        return res.status(400).json({ error: { message: 'Could not determine quote request type from provided data.' }});
    }


    // Send email to admin team
    const adminEmailData = await resend.emails.send({
        from: 'OpenEval Quote System <quotes@mail.openeval.com>', // Use a relevant sender address from your verified domain
        to: ['support@gcs.org'], // Primary recipient
        cc: ['guy@gcs.org', 'staffan@gcs.org', 'elena@gcs.org'], // CC recipients
        subject: emailSubject,
        html: emailHtml,
      });
    console.log("Admin quote notification email sent:", adminEmailData);

    if (adminEmailData.error) {
        console.error("Resend Error sending quote notification:", adminEmailData.error);
        // Log error but don't necessarily fail the frontend operation
        // Consider if you want to return a different status code here maybe?
    }

    res.status(200).json({ message: 'Quote notification email sent successfully.' });

  } catch (err: any) {
    console.error("Error sending quote notification email:", err);
    res.status(500).json({ error: { message: err.message || 'Internal Server Error while sending quote notification email' } });
  }
}
